<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/jdbc
    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	">

	<!-- start -->
	<!-- 配置数据源，使用的是alibaba的Druid(德鲁伊)数据源 -->
	<bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${jdbc.driverClass1}" />
		<property name="url" value="${jdbc.url1}" />
		<property name="username" value="${jdbc.user1}" />
		<property name="password" value="${jdbc.password1}" />

		<!-- 配置初始化连接大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />

		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
		<!--<property name="filters" value="mergeStat" /> -->

	</bean>

	<!-- mybatis配置 -->
	<bean id="sqlSessionFactory1" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
		<property name="dataSource" ref="dataSource1" />
		<property name="mapperLocations">
			<array>
				<value>classpath:mapper/datasource1/*.xml</value>
			</array>
		</property>
		<property name="typeAliasesPackage" value="${prj.groupId1}.model.datasource1" />
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<!-- <property name="properties"> <value> dialect=mysql reasonable=true 
						supportMethodsArguments=true params=count=countSql autoRuntimeDialect=true 
						</value> </property> -->
				</bean>
			</array>
		</property>
	</bean>

	<!-- 配置扫描器 -->
	<!-- 官方是org.mybatis.spring.mapper.MapperScannerConfigurer -->
	<bean id="mapperScannerConfigurer1" class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory1" />
		<!-- 暂不支持${prj.groupId}的配置，因为spring的ContextLoaderListener报错 -->
		<property name="basePackage" value="com.zl.mapper.datasource1" />
		<!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
		<!--<property name="markerInterface" value="com.isea533.mybatis.util.MyMapper" 
			/> -->
		<!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口 <property name="properties"> 
			<value> mappers=tk.mybatis.mapper.common.Mapper </value> </property> -->
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory1" />
	</bean>

	<!-- 配置Spring的事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource1" />
		<qualifier value="isap" />
	</bean>

	<!-- 全注解方式 需加上@Transactional -->
	<!-- <tx:annotation-driven id="txAdvice" transaction-manager="transactionManager" 
		/> -->
	<!-- 声明式事务,拦截器方式配置事物 -->
	<tx:advice id="txAdvice1" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />

			<!-- <tx:method name="add*" propagation="REQUIRED" /> <tx:method name="append*" 
				propagation="REQUIRED" /> <tx:method name="insert*" propagation="REQUIRED" 
				/> <tx:method name="save*" propagation="REQUIRED" /> <tx:method name="update*" 
				propagation="REQUIRED" /> <tx:method name="modify*" propagation="REQUIRED" 
				/> <tx:method name="edit*" propagation="REQUIRED" /> <tx:method name="delete*" 
				propagation="REQUIRED" /> <tx:method name="remove*" propagation="REQUIRED" 
				/> <tx:method name="repair" propagation="REQUIRED" /> <tx:method name="delAndRepair" 
				propagation="REQUIRED" /> <tx:method name="get*" propagation="SUPPORTS" /> 
				<tx:method name="find*" propagation="SUPPORTS" /> <tx:method name="load*" 
				propagation="SUPPORTS" /> <tx:method name="search*" propagation="SUPPORTS" 
				/> <tx:method name="datagrid*" propagation="SUPPORTS" /> <tx:method name="*" 
				propagation="SUPPORTS" /> -->
		</tx:attributes>
	</tx:advice>

	<!-- 事务控制拦截 -->
	<!-- <aop:config proxy-target-class="true"> <aop:advisor pointcut="execution(* 
		org.zhuc..*.service..*Service.*(..))" advice-ref="txAdvice" /> </aop:config> -->
	<aop:config>
		<aop:pointcut id="appService1"
			expression="execution(* ${prj.groupId1}.service..*Service*.*(..))" />
		<aop:advisor advice-ref="txAdvice1" pointcut-ref="appService1" />
	</aop:config>

	<!-- end -->


	<!-- multi Datasource start-->
	<!-- datasource2 start -->
		<!-- copy start-end代码，改名datasource2等 -->
	<!-- datasource2 end -->

	<!-- datasource3 start -->
		<!-- and so on.. -->
	<!-- datasource3 end -->


	<!-- multi Datasource end-->


	<aop:aspectj-autoproxy />


	<!-- 配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>${prj.groupId1}.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>



</beans>
